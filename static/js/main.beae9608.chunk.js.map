{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenres","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_rederMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","console","log","setState","stop","fetch","then","potato","json","data","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA+BA,SAASA,EAATC,GAAmC,IAAbC,EAAaD,EAAbC,OAAQC,EAAKF,EAALE,IAC1B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAI1D,SAASC,EAATC,GAA6B,IAAPC,EAAOD,EAAPC,MAClB,OACIR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,GAqBzBC,MAvDf,SAAAC,GAAiD,IAAjCN,EAAiCM,EAAjCN,MAAON,EAA0BY,EAA1BZ,OAAQa,EAAkBD,EAAlBC,OAAQC,EAAUF,EAAVE,SACnC,OACIZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEtCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACVM,EAAOE,IAAK,SAACL,EAAOM,GAAR,OAAkBd,EAAAC,EAAAC,cAACI,EAAD,CAAaE,MAAOA,EAAOO,IAAKD,OAEnEd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACXL,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACIgB,KAAOL,EACPM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCuCjBC,6MA9CbC,MAAQ,KAMRC,aAAe,WAUb,OATeC,EAAKF,MAAMG,OAAOb,IAAI,SAACc,GACpC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,CACLxB,MAAOuB,EAAME,cACb/B,OAAQ6B,EAAMG,mBACdf,IAAKY,EAAMI,GACXpB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,gBAMtBoB,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAAjC,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUb,EAAKc,WADf,OACLb,EADKU,EAAAI,KAEXC,QAAQC,IAAI,YAAYhB,GACxBD,EAAKkB,SAAS,CACZjB,WAJS,wBAAAU,EAAAQ,SAAAX,QAQbM,SAAW,WACT,OACCM,MAAM,gEACNC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKvB,SACvBwB,MAAM,SAAAC,GAAG,OAAIV,QAAQC,IAAIS,yFA7B1BC,KAAKpB,8CAiCC,IACEN,EAAW0B,KAAK7B,MAAhBG,OACR,OACE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAWqB,EAAS,MAAQ,gBAC9B0B,KAAK7B,MAAMG,OAAS0B,KAAK5B,eAAiB,kBAnDjC6B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.beae9608.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Movie.css';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Movie({title, poster, genres, synopsis}){\r\n    return (\r\n        <div className=\"Movie\" >\r\n            <div className=\"Movie__Column\">\r\n                <MoviePoster poster={poster} alt={title}/>\r\n            </div>\r\n            <div className=\"Movie__Column\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map( (genre, index) => <MovieGenres genre={genre} key={index} />)}\r\n                </div>\r\n                <div className=\"Movie__Synopsis\">\r\n                    <LinesEllipsis\r\n                        text= {synopsis}\r\n                        maxLine='3'\r\n                        ellipsis='...'\r\n                        trimRight\r\n                        basedOn='letters'\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n//함수형 컴포넌트는 라이프사이클이 없다.\r\nfunction MoviePoster({poster, alt}){\r\n    return (\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />\r\n    );\r\n}\r\n\r\nfunction MovieGenres({genre}){\r\n    return (\r\n        <span className=\"Movie__Genre\">{genre}</span>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title   : PropTypes.string.isRequired,\r\n    poster  : PropTypes.string.isRequired,\r\n    genres  : PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n}\r\nMoviePoster.propTypes = {\r\n    poster : PropTypes.string.isRequired,\r\n    alt    : PropTypes.string.isRequired\r\n}\r\nMovieGenres.propTypes = {\r\n    genre : PropTypes.string.isRequired\r\n}\r\n\r\n\r\n\r\n\r\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component{\n// flow\n// componentDidMount() ->  _getMovies() -> _callApi() -> setState() : state 설정됨\n// 설정되기를 기다리고 있던 render() 내부에서 _rederMovies() 호출하여 \n// 영화정보를 뿌려줌\n\n/*\n  Render : componentWillMount() -> render() -> componentDidMount()\n  Update : componentWillReceiveProps() -> shouldComponentUpdate()\n              -> componentWillUpdate -> render() -> component\n*/\n  state = {}\n\n  componentDidMount(){\n    this._getMovies();\n  }\n\n  _rederMovies = () => {\n    const movies = this.state.movies.map((movie)=>{\n      return <Movie \n        title={movie.title_english}\n        poster={movie.medium_cover_image}\n        key={movie.id} \n        genres={movie.genres}\n        synopsis={movie.synopsis}\n      />\n    });\n    return movies; \n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    console.log(\"movies : \",movies);\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return (\n     fetch('http://yts.lt/api/v2/list_movies.json?sort_by=download_count')\n    .then(potato => potato.json())  //return json\n    .then(json => json.data.movies) //return json.data.movies Array\n    .catch(err => console.log(err))\n    )\n  }\n\n  render(){ \n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {this.state.movies ? this._rederMovies() : \"Loading\"}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}